# Development Dockerfile for Next.js with hot reloading
FROM node:20-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Create directories and set permissions as root
RUN mkdir -p .next node_modules && \
    chown -R nextjs:nodejs /app

# Copy package files with correct ownership
COPY --chown=nextjs:nodejs package.json package-lock.json* pnpm-lock.yaml* ./

# Switch to non-root user
USER nextjs

# Install dependencies based on the preferred package manager
RUN \
  if [ -f package-lock.json ]; then npm install --ignore-scripts; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install --ignore-scripts; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Expose port
EXPOSE 3000

# Set environment variables for development and hot reloading
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV WATCHPACK_POLLING=true
ENV CHOKIDAR_USEPOLLING=true
# Increase Node.js memory limit for development
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Start the development server with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the development server
CMD \
  if [ -f yarn.lock ]; then yarn dev; \
  elif [ -f package-lock.json ]; then npm run dev; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm dev; \
  else echo "Lockfile not found." && exit 1; \
  fi
